#!/bin/bash

# Obtener el valor de $project_name pasado como argumento
project_name="$1"

"$PWD/instalarJMeter.sh"

cd "$project_name" || exit
cd servicios
mkdir -p jmeter

cd jmeter


# Mensaje de pipenv entorno virtual
echo "Creando el entorno virtual de servicios con jmeter, espere por favor..."


# Entorno virtual
echo "Entorno virtual creado satisfactoriamente"
echo 

# Instalación de dependencias 
echo "Instalando dependencias, espere por favor..."

# Ejecutar los comandos y redirigir la salida para que no sea visible
{
    pip install behave 
    pip install allure-behave
} > /dev/null 2>&1

# Dependencias instaladas
echo "Las dependencias fueron instaladas correctamente"
echo

mkdir -p features

cat > features/peticion.feature<<END
# language: es

@transaccion
Característica: Recuperar comentarios

  Antecedentes:
    Dado que quiero realizar una petición GET

  @peticionGET
  Escenario: Peticion GET
    Cuando realizo la Peticion "Peticion1" con limite de tiempo de "1000" ms
    Y me regresa un codigo de respuesta "200"
    Entonces la peticion fue exitosa

  @peticionPOST
  Escenario: Peticion POST
    Cuando realizo la Peticion "Peticion2" con limite de tiempo de "1000" ms
    Y me regresa un codigo de respuesta "200"
    Entonces la peticion fue exitosa

  @peticionConParametros
  Esquema del escenario: Peticion GET con parametros
    Cuando la Peticion "Peticion3" con parametros "<archivo_csv>"
    Y me regresa un codigo de respuesta "200"
    Entonces la peticion fue exitosa

    Ejemplos:

    | archivo_csv              |
    | ./files/peticion3.csv    |
END

cat > features/SOAP.feature<<END
# language: es

@calculadora
Característica: Servicios SOAP Operaciones basicas

  Antecedentes:
    Dado que quiero realizar una operación matematica

  @suma
  Esquema del escenario: SUMA
    Cuando realizo la petición de "SUMA" con los números "<archivo_csv>"
    Y me regresa un codigo de respuesta "200"
    Entonces la suma de los resultados es correcta

    Ejemplos:

    | archivo_csv              |
    | ./files/suma.csv         |

  @resta
  Esquema del escenario: RESTA
    Cuando realizo la petición de "RESTA" con los números "<archivo_csv>"
    Y me regresa un codigo de respuesta "200"
    Entonces la suma de los resultados es correcta

    Ejemplos:

    | archivo_csv               |
    | ./files/resta.csv         |

  @multiplicacion
  Esquema del escenario: MULTIPLICACION
    Cuando realizo la petición de "MULTIPLICACION" con los números "<archivo_csv>"
    Y me regresa un codigo de respuesta "200"
    Entonces la suma de los resultados es correcta

    Ejemplos:

    | archivo_csv                        |
    | ./files/multiplicacion.csv         |

END

mkdir -p features/steps

cat > features/steps/peticion.py<<END
from behave import given,when,then
from utils import funcionesAuxiliares as FAW
from utils import reporteAllure as REA
from utils import aserciones as ASE

@given(u'que quiero realizar una petición GET')
def step_impl(context):
    pass


@when(u'realizo la Peticion "{peticion}"')
def step_impl(context,peticion):
    FAW.ejecutar_peticion_jmeter("./jmeter_peticion/Test.jmx",peticion)

@then(u'la peticion fue exitosa')
def step_impl(context):
    datos = FAW.leer_jtl()
    REA.adjuntar_datos_jtl(datos)

@when(u'realizo la Peticion "{peticion}" con limite de tiempo de "{tiempo_max}" ms')
def step_impl(context,peticion,tiempo_max):
    FAW.ejecutar_peticion_jmeter("./jmeter_peticion/Test.jmx",peticion,int(tiempo_max))

@when(u'la Peticion "{peticion}" con parametros "{archivo_csv}"')
def step_impl(context,peticion,archivo_csv):
    FAW.ejecutar_peticion_jmeter("./jmeter_peticion/Test.jmx",peticion,None,archivo_csv)
END

cat > features/steps/SOAP.py<<END
from behave import given,when,then
from utils import funcionesAuxiliares as FAW
from utils import reporteAllure as REA
from utils import aserciones as ASE

@given(u'que quiero realizar una operación matematica')
def step_impl(context):
    pass


@when(u'realizo la petición de "{peticion}" con los números "{archivo_csv}"')
def step_impl(context,peticion,archivo_csv):
    FAW.ejecutar_peticion_jmeter("./jmeter_peticion/SOAP.jmx",peticion,None,archivo_csv)


@when(u'me regresa un codigo de respuesta "{codigo}"')
def step_impl(context,codigo):
    ASE.verificar_codigo_respuesta("./results_jmeter/results.jtl",codigo)


@then(u'la suma de los resultados es correcta')
def step_impl(context):
    datos = FAW.leer_jtl()
    REA.adjuntar_datos_jtl(datos)
END


mkdir -p files

cat > files/peticion3.csv<<END
idPeticion3
20
END

cat > files/multiplicacion.csv<<END
intA,intB
10,10
END

cat > files/resta.csv<<END
intA,intB
55,23
END

cat > files/suma.csv<<END
intA,intB
10,10
END

mkdir -p jmeter_peticion

base64_file=""
echo "$base64_file" | base64 -d > jmeter_peticion/Test.jmx

base64_file=""
echo "$base64_file" | base64 -d > jmeter_peticion/SOAP.jmx

mkdir -p results_jmeter

mkdir -p utils

cat > utils/aserciones.py<<END
from utils import errores as ERR
import csv

def verificar_tiempo_respuesta(ruta_jtl, max_tiempo):
    with open(ruta_jtl, 'r', encoding='utf-8') as archivo:
        lector_csv = csv.reader(archivo)
        next(lector_csv)
        for campos in lector_csv:
            try:
                tiempo_transcurrido = int(campos[1].strip())
            except ValueError:
                ERR.error_convertir_valor(campos)
            if tiempo_transcurrido > max_tiempo:
                raise AssertionError(f"La petición tardó demasiado: {tiempo_transcurrido:.2f} ms sobrepasando los : {max_tiempo:.2f} ms")
    
def verificar_codigo_respuesta(ruta_jtl,codigo):
    with open(ruta_jtl, 'r', encoding='utf-8') as archivo:
        lector_csv = csv.reader(archivo)
        next(lector_csv)
        for campos in lector_csv:
            try:
                codigo_respuesta = str(campos[3].strip())
            except ValueError:
                ERR.error_convertir_valor(campos)
            if codigo_respuesta != codigo:
                raise AssertionError(f"El codigo de respuesta es: {codigo_respuesta} y se esperaba que fuera: {codigo}")
END

cat > utils/errores.py<<END
def error_ejecucion_jmeter(error):
    raise Exception("No se pudo ejecutar jmeter. Error: ", error)

def error_jmeter_no_encontrado(error):
    raise Exception("No se enontro jmeter en las variables de entorno. Error: ", error)

def error_convertir_valor(linea):
    raise ValueError(f"Error al convertir el valor de 'elapsed' a entero en la línea: {linea}")

def error_formato_inesperado(linea):
    raise Exception(f"Advertencia: Línea con formato inesperado: {linea}")

END

cat > utils/funcionesAuxiliares.py<<END
from utils import errores as ERR
from utils import aserciones as ASE
import subprocess
import os
import csv

def obtener_parametros(ruta_csv):
    parametros = {}
    with open(ruta_csv, mode='r', newline='', encoding='utf-8') as archivo:
        lector_csv = csv.DictReader(archivo)
        for fila in lector_csv:
            parametros.update(fila)
    return parametros

def ejecutar_peticion_jmeter(archivo_jmx, peticion, max_tiempo_ms=None,archivo_csv=None):
    archivo_jmx_absoluto = os.path.abspath(archivo_jmx)
    archivo_resultados = os.path.abspath("./results_jmeter/results.jtl")
    archivo_resultados_auxiliar = os.path.abspath("./results_jmeter/resultsAux.jtl")
    limpiar_archivo_jtl(archivo_resultados)
    comando = [
        os.path.join('jmeter'),
        '-n',             
        '-t', archivo_jmx_absoluto,   
        '-l', archivo_resultados,
        '-Jpeticion={}'.format(peticion) 
    ]
    if archivo_csv:
        parametros = obtener_parametros(archivo_csv)
        for nombre_parametro, valor in parametros.items():
            comando.append('-J{}={}'.format(nombre_parametro,valor))
    try:
        subprocess.run(comando, check=True)
        copiar_resultados_jtl(archivo_resultados,archivo_resultados_auxiliar)

        if max_tiempo_ms is not None:
            ASE.verificar_tiempo_respuesta(archivo_resultados, max_tiempo_ms)

    except subprocess.CalledProcessError as e:
        ERR.error_ejecucion_jmeter(e)


def limpiar_archivo_jtl(ruta_jtl):
    with open(ruta_jtl, 'w', encoding='utf-8') as archivo:
        archivo.write('')

def copiar_resultados_jtl(ruta_origen, ruta_destino):
    with open(ruta_origen, 'r', encoding='utf-8') as archivo_principal:
        lineas = archivo_principal.readlines()
    
    with open(ruta_destino, 'a', encoding='utf-8') as archivo_aux:
        for linea in lineas[1:]:
            archivo_aux.write(linea)
    
def leer_jtl():
    ruta_jtl = './results_jmeter/results.jtl'
    with open(ruta_jtl, mode='r') as archivo:
        lector_csv = csv.reader(archivo)
        datos_jtl = list(lector_csv)
    return datos_jtl
END

cat > utils/reporteAllure.py<<END
import allure

def agregar_captura_reporte(context, titulo=''):
    allure.attach(
        context.driver.get_screenshot_as_png(),
        name=titulo,
        attachment_type=allure.attachment_type.PNG,
    )

def agregar_texto_reporte(informacion, titulo):
    allure.attach(informacion, name=titulo, attachment_type=allure.attachment_type.TEXT)

def adjuntar_datos_jtl(datos):
    for fila in datos:
        timestamp = fila[0]
        tiempo_respuesta = fila[1]
        nombre_muestra = fila[2]
        codigo_estado = fila[3]
        mensaje_estado = fila[4]
        nombre_grupo_hilos = fila[5]
        tipo_respuesta = fila[6]
        exito = fila[7]
        mensaje_error = fila[8]
        bytes_enviados = fila[9]
        latencia = fila[10]
        numero_muestras = fila[11]
        numero_reintentos = fila[12]
        url = fila[13]
        tiempo_conexion = fila[14]
        tiempo_servidor = fila[15]
        tiempo_espera = fila[16]
        respuesta_servidor = fila[17]

        contenido = f"""
        Timestamp: {timestamp}
        Tiempo de Respuesta: {tiempo_respuesta}
        Nombre de la Muestra: {nombre_muestra}
        Código de Estado: {codigo_estado}
        Mensaje de Estado: {mensaje_estado}
        Nombre del Grupo de Hilos: {nombre_grupo_hilos}
        Tipo de Respuesta: {tipo_respuesta}
        Éxito: {exito}
        Mensaje de Error: {mensaje_error}
        Bytes Enviados: {bytes_enviados}
        Latencia: {latencia}
        Número de Muestras: {numero_muestras}
        Número de Reintentos: {numero_reintentos}
        URL: {url}
        Tiempo de Conexión: {tiempo_conexion}
        Tiempo de Procesamiento del Servidor: {tiempo_servidor}
        Tiempo de Espera: {tiempo_espera}
        Respuesta del Servidor: {respuesta_servidor}
        """

        allure.attach(contenido, name=f'Resultado de {nombre_muestra}', attachment_type=allure.attachment_type.TEXT)
END

cd ..
cd ..